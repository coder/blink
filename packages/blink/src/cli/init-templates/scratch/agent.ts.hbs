import { convertToModelMessages, streamText, tool } from "ai";
import * as blink from "blink";
import { z } from "zod";
{{#if (eq aiProvider "anthropic")}}
import { anthropic } from "@ai-sdk/anthropic";
{{else if (eq aiProvider "openai")}}
import { openai } from "@ai-sdk/openai";
{{/if}}

const agent = new blink.Agent();

agent.on("chat", async ({ messages }) => {
  return streamText({
{{#if (eq aiProvider "anthropic")}}
    model: anthropic("claude-sonnet-4-5"),
{{else if (eq aiProvider "openai")}}
    model: openai.chat("gpt-5"),
{{else if (eq aiProvider "vercel")}}
    model: "anthropic/claude-sonnet-4.5",
{{else}}
    // Unknown provider: {{aiProvider}}. Defaulting to Vercel AI Gateway syntax.
    model: "anthropic/claude-sonnet-4.5",
{{/if}}
    system: `You are a basic agent the user will customize.

Suggest the user enters edit mode with Ctrl+T or /edit to customize the agent.
Demonstrate your capabilities with the IP tool.`,
    messages: convertToModelMessages(messages),
    tools: {
      get_ip_info: tool({
        description: "Get IP address information of the computer.",
        inputSchema: z.object({}),
        execute: async () => {
          const response = await fetch("https://ipinfo.io/json");
          return response.json();
        },
      }),
    },
  });
});

agent.serve();

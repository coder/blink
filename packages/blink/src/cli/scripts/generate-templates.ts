import { readdir, readFile, writeFile } from "fs/promises";
import { join } from "path";

async function generateTemplates() {
  const templatesDir = join(import.meta.dirname, "..", "init-templates");

  // Read all template directories
  const entries = await readdir(templatesDir, { withFileTypes: true });
  const templateDirs = entries
    .filter((entry) => entry.isDirectory())
    .map((entry) => entry.name);

  const templates: Record<string, Record<string, string>> = {};

  // Read each template directory
  for (const templateId of templateDirs) {
    const templatePath = join(templatesDir, templateId);
    const files = await readdir(templatePath);

    templates[templateId] = {};

    for (const file of files) {
      const filePath = join(templatePath, file);
      const content = await readFile(filePath, "utf-8");

      // Strip "_noignore" prefix from filename if present
      const outputFilename = file.startsWith("_noignore")
        ? file.substring("_noignore".length)
        : file;

      templates[templateId][outputFilename] = content;
    }
  }

  // Generate the index.ts file
  const outputPath = join(templatesDir, "index.ts");
  const output = `// This file is auto-generated by src/cli/scripts/generate-templates.ts
// Do not edit this file directly. Instead, edit the template files in src/cli/init-templates/*/ and run the generation script.

export const templates = ${JSON.stringify(templates, null, 2)} as const;

export type TemplateId = keyof typeof templates;
`;

  await writeFile(outputPath, output);
  console.log(`Generated ${outputPath}`);
}

generateTemplates().catch((error) => {
  console.error("Error generating templates:", error);
  process.exit(1);
});
